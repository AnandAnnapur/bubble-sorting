#include <stdio.h>

#define N 8 // Define the size of the chessboard

int board[N][N];

// Function to print the chessboard
void printBoard() {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%2d ", board[i][j]);
        }
        printf("\n");
    }
}

// Function to check if it's safe to place a queen at board[row][col]
int isSafe(int row, int col) {
    // Check the column
    for (int i = 0; i < row; i++) {
        if (board[i][col] == 1) {
            return 0;
        }
    }

    // Check upper left diagonal
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j] == 1) {
            return 0;
        }
    }

    // Check upper right diagonal
    for (int i = row, j = col; i >= 0 && j < N; i--, j++) {
        if (board[i][j] == 1) {
            return 0;
        }
    }

    return 1;
}

// Recursive function to solve N-Queens problem
int solveNQueens(int row) {
    if (row == N) {
        printBoard(); // All queens are placed, print the board
        printf("\n");
        return 1;
    }

    int solutions = 0;

    for (int i = 0; i < N; i++) {
        if (isSafe(row, i)) {
            board[row][i] = 1; // Place the queen

            solutions += solveNQueens(row + 1); // Recur for the next row

            board[row][i] = 0; // Backtrack
        }
    }

    return solutions;
}

int main() {
    int totalSolutions = solveNQueens(0);

    printf("Total solutions: %d\n", totalSolutions);

    return 0;
}
