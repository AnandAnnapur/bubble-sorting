#include <stdio.h>
#include <stdbool.h>
#include <limits.h>

#define MAX_CITIES 100

struct Edge {
    int source, destination, weight;
};

struct Graph {
    int vertices, edges;
    struct Edge edge[MAX_CITIES];
};

void initGraph(struct Graph *g, int v) {
    g->vertices = v;
    g->edges = 0;
}

void addEdge(struct Graph *g, int src, int dest, int weight) {
    g->edge[g->edges].source = src;
    g->edge[g->edges].destination = dest;
    g->edge[g->edges].weight = weight;
    g->edges++;
}

void bellmanFord(struct Graph *g, int source) {
    int distances[MAX_CITIES];
    for (int i = 0; i < g->vertices; i++) {
        distances[i] = INT_MAX;
    }
    distances[source] = 0;

    for (int i = 0; i < g->vertices - 1; i++) {
        for (int j = 0; j < g->edges; j++) {
            int u = g->edge[j].source;
            int v = g->edge[j].destination;
            int weight = g->edge[j].weight;
            if (distances[u] != INT_MAX && distances[u] + weight < distances[v]) {
                distances[v] = distances[u] + weight;
            }
        }
    }

    // Print shortest distances
    printf("Shortest distances from source city %d:\n", source);
    for (int i = 0; i < g->vertices; i++) {
        printf("To city %d: %d\n", i, distances[i]);
    }
}

int main() {
    struct Graph graph;
    int cities, edges;
    printf("Enter the number of cities: ");
    scanf("%d", &cities);
    initGraph(&graph, cities);

    printf("Enter the number of connections: ");
    scanf("%d", &edges);

    printf("Enter the connections (source destination weight):\n");
    for (int i = 0; i < edges; i++) {
        int src, dest, weight;
        scanf("%d %d %d", &src, &dest, &weight);
        addEdge(&graph, src, dest, weight);
    }

    int sourceCity;
    printf("Enter the source city: ");
    scanf("%d", &sourceCity);

    bellmanFord(&graph, sourceCity);

    return 0;
}
