#include <stdio.h>
#include <stdbool.h>

#define MAX_NODES 100

struct Graph {
    int vertices;
    int edges;
    int adjacency[MAX_NODES][MAX_NODES];
};

void initGraph(struct Graph *g, int v) {
    g->vertices = v;
    g->edges = 0;
    for (int i = 0; i < MAX_NODES; i++) {
        for (int j = 0; j < MAX_NODES; j++) {
            g->adjacency[i][j] = 0;
        }
    }
}

void addEdge(struct Graph *g, int u, int v) {
    g->adjacency[u][v] = 1;
    g->adjacency[v][u] = 1;
    g->edges++;
}

void dfs(struct Graph *g, int node, bool visited[], int component[], int *componentSize) {
    visited[node] = true;
    component[(*componentSize)++] = node;

    for (int i = 0; i < g->vertices; i++) {
        if (g->adjacency[node][i] && !visited[i]) {
            dfs(g, i, visited, component, componentSize);
        }
    }
}

void findConnectedComponents(struct Graph *g) {
    bool visited[MAX_NODES] = { false };
    
    for (int i = 0; i < g->vertices; i++) {
        if (!visited[i]) {
            int component[MAX_NODES];
            int componentSize = 0;
            dfs(g, i, visited, component, &componentSize);

            printf("Connected Component:");
            for (int j = 0; j < componentSize; j++) {
                printf(" %d", component[j]);
            }
            printf("\n");
        }
    }
}

int main() {
    struct Graph graph;
    int vertices = 7; // Adjust the number of vertices accordingly
    initGraph(&graph, vertices);

    addEdge(&graph, 0, 1);
    addEdge(&graph, 0, 2);
    addEdge(&graph, 1, 2);
    addEdge(&graph, 3, 4);
    addEdge(&graph, 5, 6);

    findConnectedComponents(&graph);

    return 0;
}
